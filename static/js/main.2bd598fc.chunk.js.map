{"version":3,"sources":["components/Card.js","components/Cardlist.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","website","email","Cardlist","monsters","map","App","state","SearchField","fetch","then","response","json","users","setState","console","log","this","filters","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAaeA,EAZF,SAACC,GAAD,OACX,sBAAKC,UAAU,qBAAf,UACE,qBACEC,IAAI,WACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,UAClB,kCAAKP,EAAMI,QAAQI,aCGRC,EARE,SAACT,GAAD,OACf,qBAAKC,UAAU,WAAf,SACGD,EAAMU,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAMA,QAASA,UCmCNQ,G,wDArCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXH,SAAU,GACVI,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEV,SAAUS,IAC1BE,QAAQC,IAAIH,Q,oBAIlB,WAAU,IAAD,OACP,EAAkCI,KAAKV,MAA/BH,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,YACZU,EAAUd,EAASe,QAAO,SAACrB,GAAD,OAC9BA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAKzB,UAAU,MAAf,UACE,2CACA,uBACEA,UAAU,QACV2B,KAAK,SACLC,YAAY,sBACZC,SAAU,SAACC,GAAD,OAAO,EAAKX,SAAS,CAAEN,YAAaiB,EAAEC,OAAOC,WAEzD,cAAC,EAAD,CAAUvB,SAAUc,W,GAjCVU,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2bd598fc.chunk.js","sourcesContent":["import \"./cardlist_container1.css\";\r\nconst Card = (props) => (\r\n  <div className=\"cardlist_container\">\r\n    <img\r\n      alt=\"monsters\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2> {props.monster.name}</h2>\r\n    <p>{props.monster.website}</p>\r\n    <p> {props.monster.email}</p>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./cardlist.css\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cardlist = (props) => (\r\n  <div className=\"cardlist\">\r\n    {props.monsters.map((monster) => (\r\n      <Card monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Cardlist;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Cardlist from \"./components/Cardlist\";\nimport \"./Input.css\";\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      SearchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ monsters: users });\n        console.log(users);\n      });\n  }\n\n  render() {\n    const { monsters, SearchField } = this.state;\n    const filters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(SearchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1> MONSTERS</h1>\n        <input\n          className=\"Input\"\n          type=\"search\"\n          placeholder=\"search the monsters\"\n          onChange={(e) => this.setState({ SearchField: e.target.value })}\n        ></input>\n        <Cardlist monsters={filters} />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}